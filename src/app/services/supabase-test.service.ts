import { Injectable } from '@angular/core';
import { supabase } from '../config/supabase.config';

// visualizacion de firmas-prueba: comentario agregado para forzar commit

@Injectable({
  providedIn: 'root'
})
export class SupabaseTestService {

  constructor() { }

  /**
   * Prueba la conexi√≥n con Supabase
   */
  async testConnection(): Promise<boolean> {
    try {
      console.log('Probando conexi√≥n con Supabase...');
      
      // Intentar listar buckets para probar la conexi√≥n
      const { data, error } = await supabase.storage.listBuckets();
      
      if (error) {
        console.error('Error conectando con Supabase:', error);
        return false;
      }
      
      console.log('Conexi√≥n exitosa! Buckets disponibles:', data);
      return true;
    } catch (error) {
      console.error('Error en testConnection:', error);
      return false;
    }
  }

  /**
   * Verifica si existe el bucket 'signatures'
   */
  async checkSignaturesBucket(): Promise<boolean> {
    try {
      // M√©todo alternativo: intentar listar archivos del bucket
      console.log('Verificando bucket signatures con m√©todo alternativo...');
      const { data, error } = await supabase.storage
        .from('signatures')
        .list('', { limit: 1 });
      
      if (error) {
        console.error('Error accediendo al bucket signatures:', error);
        if (error.message.includes('Bucket not found')) {
          console.warn('‚ö†Ô∏è El bucket "signatures" no existe.');
          return false;
        }
        // Si el error no es "bucket not found", podr√≠a ser permisos
        console.warn('‚ö†Ô∏è Posible problema de permisos en el bucket signatures');
        return false;
      }
      
      console.log('‚úÖ Bucket signatures accesible! Archivos encontrados:', data?.length || 0);
      return true;
    } catch (error) {
      console.error('Error en checkSignaturesBucket:', error);
      return false;
    }
  }

  /**
   * Prueba completa de funcionalidad
   */
  async runFullTest(): Promise<void> {
    console.log('üîß Iniciando pruebas de Supabase Storage...');
    
    const connectionOk = await this.testConnection();
    if (!connectionOk) {
      console.error('‚ùå Error de conexi√≥n con Supabase');
      return;
    }
    
    const bucketExists = await this.checkSignaturesBucket();
    if (!bucketExists) {
      console.error('‚ùå El bucket "signatures" no existe o no es accesible');
      console.log('üìù Instrucciones para crear el bucket:');
      console.log('1. Ve a https://supabase.com/dashboard');
      console.log('2. Selecciona tu proyecto');
      console.log('3. Ve a Storage ‚Üí Buckets');
      console.log('4. Crea un nuevo bucket llamado "signatures"');
      console.log('5. Marca "Public bucket" para permitir URLs p√∫blicas');
      console.log('6. Ve a la pesta√±a "Policies" del bucket');
      console.log('7. Aseg√∫rate de que hay pol√≠ticas que permitan SELECT e INSERT');
      return;
    }
    
    // Prueba de subida de archivo
    await this.testFileUpload();
    
    console.log('‚úÖ Todas las pruebas pasaron exitosamente!');
    console.log('üéâ Supabase Storage est√° listo para usar');
  }

  /**
   * Prueba de subida de archivo
   */
  async testFileUpload(): Promise<void> {
    try {
      console.log('üîÑ Probando subida de archivo de prueba...');
      
      // Crear un archivo de prueba peque√±o
      const testData = new Blob(['test signature'], { type: 'text/plain' });
      const fileName = `test-${Date.now()}.txt`;
      
      const { data, error } = await supabase.storage
        .from('signatures')
        .upload(fileName, testData);
      
      if (error) {
        console.error('‚ùå Error subiendo archivo de prueba:', error);
        return;
      }
      
      console.log('‚úÖ Archivo de prueba subido exitosamente!', data);
      
      // Intentar eliminar el archivo de prueba
      const { error: deleteError } = await supabase.storage
        .from('signatures')
        .remove([fileName]);
      
      if (deleteError) {
        console.warn('‚ö†Ô∏è No se pudo eliminar el archivo de prueba:', deleteError);
      } else {
        console.log('üóëÔ∏è Archivo de prueba eliminado correctamente');
      }
      
    } catch (error) {
      console.error('Error en testFileUpload:', error);
    }
  }
}
