const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

async function universalCleanProblematicRecords() {
  try {
    const client = await pool.connect();
    
    console.log('=== LIMPIEZA UNIVERSAL DE REGISTROS PROBLEM√ÅTICOS ===');
    
    // Buscar TODOS los registros con c√≥digos problem√°ticos (m√∫ltiples guiones)
    const problematicResult = await client.query(`
      SELECT id, code, name, category, talla, quantity 
      FROM supply_inventory 
      WHERE code ~ '.*-.*-.*'
      ORDER BY name, code
    `);
    
    console.log(`Total de registros problem√°ticos encontrados: ${problematicResult.rows.length}`);
    
    if (problematicResult.rows.length === 0) {
      console.log('‚úÖ No se encontraron registros problem√°ticos. El sistema est√° limpio.');
      client.release();
      await pool.end();
      return;
    }
    
    // Iniciar transacci√≥n
    await client.query('BEGIN');
    
    let processedCount = 0;
    let mergedCount = 0;
    let updatedCount = 0;
    
    for (const record of problematicResult.rows) {
      console.log(`\nüì¶ Procesando: ${record.name} - ID ${record.id}`);
      console.log(`   C√≥digo problem√°tico: "${record.code}" -> Talla: "${record.talla}"`);
      
      // Extraer c√≥digo base (primera parte antes del primer gui√≥n)
      const baseCode = record.code.split('-')[0];
      const correctCode = `${baseCode}-${record.talla}`;
      
      console.log(`   C√≥digo correcto: "${correctCode}"`);
      
      // Verificar si ya existe un registro con el c√≥digo correcto
      const existingCheck = await client.query(
        'SELECT id, quantity FROM supply_inventory WHERE code = $1 AND id != $2',
        [correctCode, record.id]
      );
      
      if (existingCheck.rows.length > 0) {
        const existingRecord = existingCheck.rows[0];
        console.log(`   ‚ö†Ô∏è  Ya existe registro con c√≥digo "${correctCode}" (ID: ${existingRecord.id})`);
        
        // Fusionar cantidades si el registro problem√°tico tiene stock
        if (record.quantity > 0) {
          const newQuantity = existingRecord.quantity + record.quantity;
          await client.query(
            'UPDATE supply_inventory SET quantity = $1, last_update = CURRENT_TIMESTAMP WHERE id = $2',
            [newQuantity, existingRecord.id]
          );
          console.log(`   üîÑ Cantidades fusionadas: ${existingRecord.quantity} + ${record.quantity} = ${newQuantity}`);
        }
        
        // Eliminar el registro problem√°tico
        await client.query('DELETE FROM supply_inventory WHERE id = $1', [record.id]);
        console.log(`   üóëÔ∏è  Registro problem√°tico eliminado`);
        mergedCount++;
      } else {
        // Actualizar el c√≥digo del registro problem√°tico
        await client.query(
          'UPDATE supply_inventory SET code = $1, last_update = CURRENT_TIMESTAMP WHERE id = $2',
          [correctCode, record.id]
        );
        console.log(`   ‚úÖ C√≥digo actualizado de "${record.code}" a "${correctCode}"`);
        updatedCount++;
      }
      
      processedCount++;
    }
    
    // Confirmar cambios
    await client.query('COMMIT');
    
    console.log('\n=== RESUMEN DE LIMPIEZA ===');
    console.log(`üìä Total de registros procesados: ${processedCount}`);
    console.log(`üîÑ Registros fusionados y eliminados: ${mergedCount}`);
    console.log(`‚úÖ Registros actualizados: ${updatedCount}`);
    console.log('üéâ Limpieza completada exitosamente');
    
    // Verificaci√≥n final
    const finalCheck = await client.query(`
      SELECT COUNT(*) as count 
      FROM supply_inventory 
      WHERE code ~ '.*-.*-.*'
    `);
    
    console.log(`\nüîç Verificaci√≥n final: ${finalCheck.rows[0].count} registros problem√°ticos restantes`);
    
    if (finalCheck.rows[0].count === 0) {
      console.log('‚úÖ Sistema completamente limpio');
    } else {
      console.log('‚ö†Ô∏è  A√∫n quedan registros problem√°ticos que requieren atenci√≥n manual');
    }
    
    client.release();
    await pool.end();
    
  } catch (error) {
    console.error('‚ùå Error durante la limpieza:', error);
    
    // Rollback en caso de error
    try {
      const client = await pool.connect();
      await client.query('ROLLBACK');
      client.release();
      console.log('üîÑ Rollback ejecutado exitosamente');
    } catch (rollbackError) {
      console.error('‚ùå Error en rollback:', rollbackError);
    }
  }
}

// Ejecutar solo si se llama directamente
if (require.main === module) {
  universalCleanProblematicRecords();
}

module.exports = { universalCleanProblematicRecords };